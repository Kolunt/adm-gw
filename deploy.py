#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ—Å–ª–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, cwd=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, cwd=cwd)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    success, stdout, stderr = run_command("git status --porcelain")
    if success:
        return stdout.strip() != ""
    return False

def commit_and_push():
    """–ó–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏ –∑–∞–ø—É—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    print("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é –≤ GitHub...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if not check_git_status():
        print("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
        return True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    print("üìÅ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ git...")
    success, stdout, stderr = run_command("git add .")
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {stderr}")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    version_file = Path("VERSION")
    if version_file.exists():
        version = version_file.read_text().strip()
    else:
        version = "unknown"
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
    commit_message = f"üöÄ Release v{version} - –ê–Ω–æ–Ω–∏–º–Ω—ã–π –î–µ–¥ –ú–æ—Ä–æ–∑"
    print(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: {commit_message}")
    success, stdout, stderr = run_command(f'git commit -m "{commit_message}"')
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞: {stderr}")
        return False
    
    # –ü—É—à–∏–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
    success, stdout, stderr = run_command("git push origin main")
    if not success:
        # –ü—Ä–æ–±—É–µ–º master –µ—Å–ª–∏ main –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        success, stdout, stderr = run_command("git push origin master")
        if not success:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {stderr}")
            return False
    
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ GitHub!")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è"""
    print("üéÖ –î–µ–ø–ª–æ–π –ø—Ä–æ–µ–∫—Ç–∞ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –î–µ–¥ –ú–æ—Ä–æ–∑ –≤ GitHub...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    if not Path(".git").exists():
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...")
        success, stdout, stderr = run_command("git init")
        if not success:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ git: {stderr}")
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º remote origin
        success, stdout, stderr = run_command("git remote add origin https://github.com/Kolunt/adm-gw.git")
        if not success:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è remote: {stderr}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º remote
    success, stdout, stderr = run_command("git remote -v")
    if success:
        print(f"üì° Remote —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: {stdout}")
    
    # –ö–æ–º–º–∏—Ç–∏–º –∏ –ø—É—à–∏–º
    if commit_and_push():
        print("üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üåê –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/Kolunt/adm-gw")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ")
        sys.exit(1)

if __name__ == "__main__":
    main()
