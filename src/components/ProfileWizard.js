import React, { useState, useEffect, useCallback } from 'react';
import { Steps, Card, Form, Input, Button, Typography, message, Space } from 'antd';
import { 
  LinkOutlined, 
  UserOutlined, 
  HomeOutlined, 
  HeartOutlined,
  CheckCircleOutlined 
} from '@ant-design/icons';
import axios from 'axios';
import GWarsVerification from './GWarsVerification';

const { Title, Text } = Typography;
const { TextArea } = Input;

function ProfileWizard({ onProfileCompleted }) {
  const [currentStep, setCurrentStep] = useState(0);
  const [loading, setLoading] = useState(false);
  const [profileStatus, setProfileStatus] = useState(null);
  const [form] = Form.useForm();

  const fetchProfileStatus = useCallback(async () => {
    try {
      const response = await axios.get('/profile/status', {
        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
      });
      setProfileStatus(response.data);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
      if (response.data.next_step) {
        setCurrentStep(response.data.next_step - 1);
      }
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      form.setFieldsValue({
        gwars_profile_url: response.data.step1_completed ? 'completed' : '',
        full_name: response.data.step2_completed ? 'completed' : '',
        address: response.data.step2_completed ? 'completed' : '',
        interests: response.data.step3_completed ? 'completed' : ''
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
  }, [form]);

  useEffect(() => {
    fetchProfileStatus();
  }, [fetchProfileStatus]);

  const steps = [
    {
      title: 'GWars –ø—Ä–æ—Ñ–∏–ª—å',
      icon: <LinkOutlined />,
      description: '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –≤ GWars.io'
    },
    {
      title: '–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
      icon: <UserOutlined />,
      description: '–§–ò–û –∏ –∞–¥—Ä–µ—Å'
    },
    {
      title: '–ò–Ω—Ç–µ—Ä–µ—Å—ã',
      icon: <HeartOutlined />,
      description: '–í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è'
    }
  ];


  const handleGWarsVerificationComplete = () => {
    message.success('GWars –ø—Ä–æ—Ñ–∏–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!');
    setCurrentStep(1);
    fetchProfileStatus();
  };

  const onStep2Finish = async (values) => {
    setLoading(true);
    try {
      await axios.post('/profile/step2', values, {
        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
      });
      message.success('–®–∞–≥ 2 –∑–∞–≤–µ—Ä—à–µ–Ω!');
      setCurrentStep(2);
      fetchProfileStatus();
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  const onStep3Finish = async (values) => {
    setLoading(true);
    try {
      await axios.post('/profile/step3', values, {
        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
      });
      message.success('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω!');
      fetchProfileStatus();
      onProfileCompleted();
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <GWarsVerification onVerificationComplete={handleGWarsVerificationComplete} />
        );

      case 1:
        return (
          <Card>
            <Title level={3} style={{ color: '#d63031', marginBottom: '20px' }}>
              <UserOutlined /> –®–∞–≥ 2: –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            </Title>
            <Text style={{ marginBottom: '20px', display: 'block' }}>
              –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤.
            </Text>
            <Form
              form={form}
              layout="vertical"
              onFinish={onStep2Finish}
              size={window.innerWidth <= 768 ? "middle" : "large"}
            >
              <Form.Item
                name="full_name"
                label="–ü–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û)"
                rules={[
                  { required: true, message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è!' },
                  { min: 2, message: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞!' }
                ]}
              >
                <Input 
                  placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
                  prefix={<UserOutlined />}
                />
              </Form.Item>
              <Form.Item
                name="address"
                label="–ê–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤"
                rules={[
                  { required: true, message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å!' },
                  { min: 10, message: '–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤!' }
                ]}
              >
                <TextArea 
                  placeholder="–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1, –∫–≤. 1, –∏–Ω–¥–µ–∫—Å 123456"
                  rows={3}
                  prefix={<HomeOutlined />}
                />
              </Form.Item>
              <Form.Item>
                <Space>
                  <Button onClick={() => setCurrentStep(0)}>
                    –ù–∞–∑–∞–¥
                  </Button>
                  <Button 
                    type="primary" 
                    htmlType="submit" 
                    loading={loading}
                    style={{ backgroundColor: '#d63031', borderColor: '#d63031' }}
                  >
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                  </Button>
                </Space>
              </Form.Item>
            </Form>
          </Card>
        );

      case 2:
        return (
          <Card>
            <Title level={3} style={{ color: '#d63031', marginBottom: '20px' }}>
              <HeartOutlined /> –®–∞–≥ 3: –ò–Ω—Ç–µ—Ä–µ—Å—ã
            </Title>
            <Text style={{ marginBottom: '20px', display: 'block' }}>
              –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö, —á—Ç–æ–±—ã –≤–∞—à —Ç–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–¥–∞—Ä–æ–∫.
            </Text>
            <Form
              form={form}
              layout="vertical"
              onFinish={onStep3Finish}
              size={window.innerWidth <= 768 ? "middle" : "large"}
            >
              <Form.Item
                name="interests"
                label="–í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"
                rules={[
                  { required: true, message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö!' },
                  { min: 10, message: '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤!' }
                ]}
              >
                <TextArea 
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ª—é–±–ª—é —á–∏—Ç–∞—Ç—å —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫—É, –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä—É—é –º–∞—Ä–∫–∏, —É–≤–ª–µ–∫–∞—é—Å—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏..."
                  rows={4}
                  prefix={<HeartOutlined />}
                />
              </Form.Item>
              <Form.Item>
                <Space>
                  <Button onClick={() => setCurrentStep(1)}>
                    –ù–∞–∑–∞–¥
                  </Button>
                  <Button 
                    type="primary" 
                    htmlType="submit" 
                    loading={loading}
                    icon={<CheckCircleOutlined />}
                    style={{ backgroundColor: '#d63031', borderColor: '#d63031' }}
                  >
                    –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                  </Button>
                </Space>
              </Form.Item>
            </Form>
          </Card>
        );

      default:
        return null;
    }
  };

  if (profileStatus?.profile_completed) {
    return (
      <Card>
        <div style={{ textAlign: 'center', padding: '40px' }}>
          <CheckCircleOutlined style={{ fontSize: '64px', color: '#52c41a', marginBottom: '20px' }} />
          <Title level={2} style={{ color: '#52c41a' }}>
            –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω!
          </Title>
          <Text style={{ fontSize: '16px' }}>
            –°–ø–∞—Å–∏–±–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–±–º–µ–Ω–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏.
          </Text>
        </div>
      </Card>
    );
  }

  return (
    <div style={{ 
      maxWidth: window.innerWidth <= 768 ? '100%' : '600px', 
      margin: '0 auto',
      padding: window.innerWidth <= 768 ? '10px' : '20px'
    }}>
      <Card className="santa-card">
        <Title level={2} style={{ 
          color: '#d63031', 
          textAlign: 'center',
          marginBottom: '30px',
          fontSize: window.innerWidth <= 768 ? '20px' : '24px'
        }}>
          üéÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        </Title>
        
        <Steps
          current={currentStep}
          items={steps}
          style={{ marginBottom: '30px' }}
          size={window.innerWidth <= 768 ? "small" : "default"}
        />
        
        {renderStepContent()}
      </Card>
    </div>
  );
}

export default ProfileWizard;

