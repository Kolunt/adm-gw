#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import logging
from typing import Optional, List
from datetime import datetime

logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        self.bot_info = None
        
    def get_bot_info(self) -> Optional[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
        try:
            response = requests.get(f"{self.base_url}/getMe")
            if response.status_code == 200:
                self.bot_info = response.json()["result"]
                return self.bot_info
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {response.text}")
                return None
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
            return None
    
    def send_message(self, chat_id: str, text: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            data = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": parse_mode
            }
            
            response = requests.post(f"{self.base_url}/sendMessage", json=data)
            
            if response.status_code == 200:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    def send_notification_to_user(self, telegram_id: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        return self.send_message(telegram_id, message)
    
    def send_notification_to_all(self, telegram_users: List[dict], message: str) -> dict:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        results = {
            "success": 0,
            "failed": 0,
            "errors": []
        }
        
        for user in telegram_users:
            if user.get("is_active", True):
                success = self.send_notification_to_user(
                    user["telegram_id"], 
                    message
                )
                
                if success:
                    results["success"] += 1
                else:
                    results["failed"] += 1
                    results["errors"].append({
                        "user_id": user.get("user_id"),
                        "telegram_id": user["telegram_id"],
                        "error": "Failed to send message"
                    })
        
        return results
    
    def send_event_notification(self, telegram_users: List[dict], event: dict, notification_type: str) -> dict:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if notification_type == "event_created":
            message = f"""
üéÖ <b>–ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>

üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {event.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üîî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è!
"""
        elif notification_type == "preregistration_started":
            message = f"""
üéÖ <b>–ù–∞—á–∞–ª–∞—Å—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!</b>

üìù <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b> {event.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìÖ <b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</b> {event.get('preregistration_start', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

‚ö° –£—Å–ø–µ–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–≤—ã–º–∏!
"""
        elif notification_type == "registration_started":
            message = f"""
üéÖ <b>–ù–∞—á–∞–ª–∞—Å—å –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!</b>

üìù <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b> {event.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìÖ <b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</b> {event.get('registration_start', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìÖ <b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {event.get('registration_end', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üéÅ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –æ–±–º–µ–Ω–µ –ø–æ–¥–∞—Ä–∫–∞–º–∏!
"""
        elif notification_type == "registration_ending_soon":
            message = f"""
‚ö†Ô∏è <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–∫–æ—Ä–æ!</b>

üìù <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b> {event.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìÖ <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {event.get('registration_end', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

‚è∞ –£—Å–ø–µ–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!
"""
        elif notification_type == "event_ended":
            message = f"""
üéÖ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>

üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {event.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìÖ <b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {event.get('registration_end', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üéÅ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –ñ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π!
"""
        else:
            message = f"""
üéÖ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏</b>

üìù <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b> {event.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìÖ <b>–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {notification_type}
"""
        
        return self.send_notification_to_all(telegram_users, message)
    
    def validate_token(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
        bot_info = self.get_bot_info()
        return bot_info is not None


def create_telegram_bot(bot_token: str) -> Optional[TelegramBot]:
    """–°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–æ–∫–µ–Ω–∞"""
    try:
        bot = TelegramBot(bot_token)
        if bot.validate_token():
            return bot
        else:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram –±–æ—Ç–∞: {e}")
        return None
